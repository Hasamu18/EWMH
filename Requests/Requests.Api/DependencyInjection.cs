using FirebaseAdmin;
using Google.Apis.Auth.OAuth2;
using Google.Cloud.Firestore;
using Logger.LoggingTool;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Diagnostics.HealthChecks;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Requests.Domain.Entities;
using Serilog;
using System.Reflection;
using System.Text;

namespace Requests.Api
{
    public static class DependencyInjection
    {
        public static void IncludeSerilog(this IHostBuilder builder)
        {
            builder.UseSerilog(LoggingTool.ConfigureLogger);
        }

        public static void AddSqlServerDbContext(this WebApplicationBuilder builder)
        {
            builder.Services.AddDbContext<Sep490Context>(get =>
                get.UseSqlServer(builder.Configuration.GetConnectionString("SqlServer")));
        }

        public static void AddFireBaseConfig(this WebApplicationBuilder builder)
        {
            builder.Configuration.AddJsonFile("firebase.json", optional: true, reloadOnChange: true)
                      .AddEnvironmentVariables();

            var firebaseFile = Path.Combine(Directory.GetCurrentDirectory(), "firebase.json");
            Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", firebaseFile);
            builder.Services.AddSingleton(FirestoreDb.Create(builder.Configuration["project_id"]));
            FirebaseApp.Create(new AppOptions()
            {
                Credential = GoogleCredential.FromFile(firebaseFile)
            });
        }

        public static void AddCustomSwaggerGen(this IServiceCollection services)
        {
            services.AddSwaggerGen(c =>
            {
                // Locate the XML file being generated by ASP.NET...
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                // ... and tell Swagger to use those XML comments.
                c.IncludeXmlComments(xmlPath);
                c.SwaggerDoc("v1",
                    new OpenApiInfo
                    {
                        Title = "Requests.Api",
                        Description = "Contains request apis",
                        Version = "Version 1",
                    });
                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    In = ParameterLocation.Header,
                    Description = "Please enter token",
                    Name = "Authorization",
                    Type = SecuritySchemeType.Http,
                    BearerFormat = "JWT",
                    Scheme = "Bearer"
                });
                c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            Array.Empty<string>()
        }
    });
            });
        }

        public static void AddAppAuthetication(this WebApplicationBuilder builder)
        {
            var settingsSection = builder.Configuration.GetSection("Jwt");

            var secret = settingsSection.GetValue<string>("Secret");
            var issuer = settingsSection.GetValue<string>("Issuer");
            var audience = settingsSection.GetValue<string>("Audience");

            if (secret is null)
                throw new ArgumentNullException(nameof(secret));

            var key = Encoding.ASCII.GetBytes(secret);
            builder.Services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(x =>
            {
                x.TokenValidationParameters = new TokenValidationParameters
                {
                    IssuerSigningKey = new SymmetricSecurityKey(key),
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = issuer,
                    ValidateIssuer = true,
                    ValidAudience = audience,
                    ValidateAudience = true,
                    ClockSkew = TimeSpan.Zero
                };
            });
        }

        public static void AddCustomCors(this IServiceCollection services)
        {
            services.AddCors(options =>
            {
                options.AddPolicy("CorsPolicy", policy =>
                {
                    policy.AllowAnyHeader()
                          .AllowAnyMethod()
                          .AllowAnyOrigin();
                });
            });
        }

        public static void AddSqlServerHealthCheck(this WebApplicationBuilder builder)
        {
            builder.Services.AddHealthChecks()
            .AddSqlServer(builder.Configuration.GetConnectionString("SqlServer")!,
            failureStatus: HealthStatus.Unhealthy,
            timeout: TimeSpan.FromSeconds(10));
        }

    }
}
